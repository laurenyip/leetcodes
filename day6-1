



class DynamicArray:
    
    def __init__(self, capacity: int):
        self.capacity = capacity  # Store the capacity
        self.size = 0  # Initialize the size
        self.array = [None] * capacity  # Create an array of None with the given capacity
    
    def get(self, i: int) -> int:
        if i < 0 or i >= self.size:
            raise IndexError("Index out of bounds")
        return self.array[i]

    def set(self, i: int, n: int) -> None:
        if i < self.size and i >=0:
            self.array[i] = n
            

    def pushback(self, n: int) -> None:
        if self.size >= self.capacity:
            self.resize()
        self.array[self.size] = n  # Correctly place `n` at the current size index
        self.size += 1  # Increment the size



    def popback(self) -> int:
        if self.size == 0:
            raise IndexError("Array is empty, cannot pop back")
        self.size -= 1
        return self.array[self.size]  # Return the last element


    def resize(self) -> None:
        new_capacity = self.capacity * 2
        new_array = [None] * new_capacity
        for i in range(self.size):
            new_array[i] = self.array[i]
        self.array = new_array
        self.capacity = new_capacity


    def getSize(self) -> int:
        return self.size
    
    def getCapacity(self) -> int:
        return self.capacity
123456789101112131415161718192021222324
class DynamicArray:
    
    def __init__(self, capacity: int):


    def get(self, i: int) -> int:


    def set(self, i: int, n: int) -> None:


["Array", 1, "getSize", "getCapacity"]










